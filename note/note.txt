
JPA	:	Java Persistence API(자바 영속성 API)
		ㄴ	JAVA ORM API 표준
			ㄴ	Object Relational Mapping
				객체와 관계형 데이터베이스 Mapping
				ㄴ	Java Object(class)
					ㄴ	Entity class
					
					
	Java Object(Entity class) <--> ORM <--> 관계형 데이터베이스


												 Persistence		Context
												 
	Entity				Entity Manager				Entity			Entity
	Manager		-->							-->		
	Factory				Entity Manager				Entity			Entity
	
	
	
	Entity	:	Database의 table 에 대응하는 class
				@Entity 어노테이션을 붙임
				
				
	Entity Manager Factory	:	Entity Manager Instance 를 생성, 관리함
								Application을 실행하면 하나가 만들어짐
								
								
	Entity Manager	:	Persistence Context(영속성 컨텍스트)에 접근해서
						Entity를 대상으로 database 작업(CRUD)을 처리함
						
						Persistence Context(영속성 컨텍스트)
						
						1차		cache
						@Id		Entity					item2라는 Entity가
		item2를 얻고자	1L		item1					1차 cache에 저장되지 않은 경우
		2L로 조회함		2L		item2					Database에서 조회함
		
		1차 cache에서	item2라는 Entity를				Database
		item2을 반환함	Database에서 조회해서
						1차 cache에 저장함
						
		1차 cache	:	item(Entity)을 영속성 컨텍스트에 Map<Key, Value> 형태로 저장
						조회시에는 find()메소드를 호출함
						
			ㄴ	동일한 Transaction에서 key 값이 같은 경우에는
				동일한 Entity임을 보장해 줌	->	동일성 보장
				
				
				
database 초기화 DDL AUTO Option

	spring.jpa.hibernate.ddl-auto = create

	*create		:	기존 table 삭제 후 새 table 생성
	none		:	사용하지 않음
	create-drop	:	기존 table 삭제 후 새 table 생성	/	종료할 때 table 삭제
	*update		:	변경된 내용만 반영
	validate	:	Entity와 table이 정상적으로 Mapping 되었는지 확인함


Query Method

	Query Method이름 형식	:	find(EntityClass이름)By(멤버변수이름-DB의 컬럼)
	
	Query Method를 호출하려면
		JPA Repository 인터페이스를 extends 하는 인터페이스를 작성해야 함


@Query 어노테이션
ㄴ	Query Method 에 붙임
	JPQL(Java Persistence Query Language)을 작성할 수 있음
	
	
Querydsl
ㄴ	JPQL을 java code로 작성할 수 있도록 도와주는 API
	java code로 작성하기 때문에 compile시 오류를 발견할 수 있음
	동적으로 query 를 생성할 수 있음
	
	mvnrepository	>	querydsl-jpa / querydsl-apt


Login, Logout 기능 구현
ㄴ	Spring Security 에서 UserDetailsService 인터페이스를 implements 하는 
	클래스를 작성해서 로그인 기능 구현
	
	UserDetailsService 인터페이스는 DataBase에서 회원 정보를 가져오는 역할을 함
		-	loadUserByUsername() 메소드를 overriding 해서
			회원 정보를 조회하고 사용자의 정보와 권한을 갖는
			UserDetail 인터페이스를 반환함
			ㄴ	Spring Security에서 회원의 정보를 담는 기능을 함
				UserDetail 인터페이스를 implements 하는 클래스(User)를 사용함
													ㄴ	클래스(User)의 객체를 생성함


연관 관계 매핑(매핑된 Entity를 조회할 때 지연로딩 방식과 즉시 로딩 방식이 있음)

	즉시 로딩	-	@OneToOne(fetch=FetchType.EAGER)
			ㄴ	@OneToOne, @ManyToOne 방식으로 매핑할 때 기본값
			ㄴ	Entity 를 조회할 때 해당 Entity 와 Mapping 된 Entity를 한꺼번에 조회함
	
	지연 로딩	-	@OneToMany(fetch=FetchType.LAZY)
			ㄴ	@OneToMany 방식으로 매핑할 때 기본값
			ㄴ	필요한 시점에 연관된 객체(Entity)의 data를 조회함

	연관 관계 매핑 종류
	1)	1	:	1	<--	@OneToOne
	2)	1	:	N	<--	@OneToMany
	3)	N	:	1	<--	@ManyToOne
	4)	N	:	N	<--	@ManyToMany
	
	연관 관계 매핑 방향
	1)	단방향
	2)	양방향	<--	대부분이 양방향
	
	
	N	:	1	Mapping
	
		-	장바구니에는 고객이 구매하고자 하는 상품들을 담음
		-	하나의 장바구니에는 여러개의 상품을 담을 수 있음
		-	하나의 상품은 여러 장바구니에 담길 수 있음
		-	장바구니 t	-	장바구니 상품t	-	상품


orders 테이블과 order_item 테이블 관계 mapping

	-	orders 테이블의 orders_id 컬럼을 order_item 테이블의 orders_id 컬럼에서 사용하도록 설정	=	Foreign Key
	-	어떤 상품을 주문했는지 알 수 있고, 주문한 상품이 어떤 주문에 속해 있는지 파악할 수 있은
		
		**********************************************
			외래키(Foreign Key) 로 양방향 조회를 할 수 있음
		**********************************************
























**	class 안에 있으면 메소드
	class 밖에 있으면 함수

