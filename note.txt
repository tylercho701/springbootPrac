
JPA	:	Java Persistence API(자바 영속성 API)
		ㄴ	JAVA ORM API 표준
			ㄴ	Object Relational Mapping
				객체와 관계형 데이터베이스 Mapping
				ㄴ	Java Object(class)
					ㄴ	Entity class
					
					
	Java Object(Entity class) <--> ORM <--> 관계형 데이터베이스


												 Persistence		Context
												 
	Entity				Entity Manager				Entity			Entity
	Manager		-->							-->		
	Factory				Entity Manager				Entity			Entity
	
	
	
	Entity	:	Database의 table 에 대응하는 class
				@Entity 어노테이션을 붙임
				
				
	Entity Manager Factory	:	Entity Manager Instance 를 생성, 관리함
								Application을 실행하면 하나가 만들어짐
								
								
	Entity Manager	:	Persistence Context(영속성 컨텍스트)에 접근해서
						Entity를 대상으로 database 작업(CRUD)을 처리함
						
						Persistence Context(영속성 컨텍스트)
						
						1차		cache
						@Id		Entity					item2라는 Entity가
		item2를 얻고자	1L		item1					1차 cache에 저장되지 않은 경우
		2L로 조회함		2L		item2					Database에서 조회함
		
		1차 cache에서	item2라는 Entity를				Database
		item2을 반환함	Database에서 조회해서
						1차 cache에 저장함
						
		1차 cache	:	item(Entity)을 영속성 컨텍스트에 Map<Key, Value> 형태로 저장
						조회시에는 find()메소드를 호출함
						
			ㄴ	동일한 Transaction에서 key 값이 같은 경우에는
				동일한 Entity임을 보장해 줌	->	동일성 보장
				
				
				
database 초기화 DDL AUTO Option

	spring.jpa.hibernate.ddl-auto = create

	*create		:	기존 table 삭제 후 새 table 생성
	none		:	사용하지 않음
	create-drop	:	기존 table 삭제 후 새 table 생성	/	종료할 때 table 삭제
	*update		:	변경된 내용만 반영
	validate	:	Entity와 table이 정상적으로 Mapping 되었는지 확인함


Query Method

	Query Method이름 형식	:	find(EntityClass이름)By(멤버변수이름-DB의 컬럼)
	
	Query Method를 호출하려면
		JPA Repository 인터페이스를 extends 하는 인터페이스를 작성해야 함


@Query 어노테이션
ㄴ	Query Method 에 붙임
	JPQL(Java Persistence Query Language)을 작성할 수 있음
	
	
Querydsl
ㄴ	JPQL을 java code로 작성할 수 있도록 도와주는 API
	java code로 작성하기 때문에 compile시 오류를 발견할 수 있음
	동적으로 query 를 생성할 수 있음
	
	mvn repository	>	querydsl-jpa / querydsl-









